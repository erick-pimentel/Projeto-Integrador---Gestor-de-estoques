/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gestorestoques;

import java.awt.Color;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author Ericz
 */
public class movimentacoes extends javax.swing.JFrame {

    /**
     * Creates new form movimentacoes
     */
    
    private String perfil;
    private int idUsuario;
    
    public movimentacoes(String perfil, int idUsuario) {
        initComponents();
        
        this.perfil=perfil;
        this.idUsuario=idUsuario;
        
        txt_movimentacoesTipo.setText("Entrada / Saida / Ajuste");
        txt_movimentacoesTipo.setForeground(Color.BLACK);
        
        txt_movimentacoesProduto.setText("Insira o nome do produto movimentado");
        txt_movimentacoesProduto.setForeground(Color.BLACK);

        txt_movimentacoesQuantidade.setText("Insira a quantidade movimentada");
        txt_movimentacoesQuantidade.setForeground(Color.BLACK);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_movimentacoesTipo = new javax.swing.JTextField();
        txt_movimentacoesProduto = new javax.swing.JTextField();
        txt_movimentacoesQuantidade = new javax.swing.JTextField();
        btn_movimentacoesRegistrar = new javax.swing.JButton();
        btn_movimentacoesCancel = new javax.swing.JButton();
        btn_movimentacoesVoltar = new javax.swing.JButton();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("MOVIMENTAÇÕES");

        jLabel2.setText("TIPO DE MOVIMENTAÇÃO:");

        jLabel3.setText("PRODUTO:");

        jLabel4.setText("QUANTIDADE:");

        txt_movimentacoesTipo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_movimentacoesTipoFocusLost(evt);
            }
        });
        txt_movimentacoesTipo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txt_movimentacoesTipoMousePressed(evt);
            }
        });

        txt_movimentacoesProduto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_movimentacoesProdutoFocusLost(evt);
            }
        });
        txt_movimentacoesProduto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txt_movimentacoesProdutoMousePressed(evt);
            }
        });

        txt_movimentacoesQuantidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_movimentacoesQuantidadeFocusLost(evt);
            }
        });
        txt_movimentacoesQuantidade.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txt_movimentacoesQuantidadeMousePressed(evt);
            }
        });

        btn_movimentacoesRegistrar.setBackground(new java.awt.Color(0, 255, 30));
        btn_movimentacoesRegistrar.setText("REGISTRAR");
        btn_movimentacoesRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_movimentacoesRegistrarActionPerformed(evt);
            }
        });

        btn_movimentacoesCancel.setBackground(new java.awt.Color(255, 0, 0));
        btn_movimentacoesCancel.setText("CANCELAR");
        btn_movimentacoesCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_movimentacoesCancelActionPerformed(evt);
            }
        });

        btn_movimentacoesVoltar.setBackground(new java.awt.Color(0, 200, 0));
        btn_movimentacoesVoltar.setText("VOLTAR");
        btn_movimentacoesVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_movimentacoesVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(btn_movimentacoesRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(btn_movimentacoesCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txt_movimentacoesTipo, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                                    .addComponent(txt_movimentacoesProduto)
                                    .addComponent(txt_movimentacoesQuantidade)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(btn_movimentacoesVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_movimentacoesTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_movimentacoesProduto)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_movimentacoesQuantidade)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_movimentacoesCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_movimentacoesRegistrar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(btn_movimentacoesVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_movimentacoesRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_movimentacoesRegistrarActionPerformed
        String tipo = txt_movimentacoesTipo.getText().trim(); // Entrada, Saída, Ajuste
        String quantidadeStr = txt_movimentacoesQuantidade.getText().trim();
        String codigoProduto = txt_movimentacoesProduto.getText().trim(); // JTextField do produto

        if(tipo.isEmpty() || quantidadeStr.isEmpty() || codigoProduto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Preencha todos os campos de movimentação!");
            return;
        }

        int quantidade;
        try {
            quantidade = Integer.parseInt(quantidadeStr);
            if(quantidade <= 0) throw new NumberFormatException();
        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Informe uma quantidade válida!");
            return;
        }

        // Conectar ao banco
        String url = "jdbc:mysql://localhost:3306/gestor_estoque";
        String usuarioDB = "root";
        String senhaDB = "1234";

        try (Connection conn = DriverManager.getConnection(url, usuarioDB, senhaDB)) {

            // 1️⃣ Verificar se o produto existe
            String sqlProd = "SELECT id_produto, nome_produto, quantidade_estoque FROM produtos WHERE codigo_produto = ?";
            PreparedStatement pstProd = conn.prepareStatement(sqlProd);
            pstProd.setString(1, codigoProduto);
            ResultSet rs = pstProd.executeQuery();

            if(!rs.next()) {
                JOptionPane.showMessageDialog(this, "Produto não encontrado!");
                return;
            }

            int idProduto = rs.getInt("id_produto");
            int estoqueAtual = rs.getInt("quantidade_estoque");
            String nomeProduto = rs.getString("nome_produto");

            // 2️⃣ Verificar estoque para saída
            if(tipo.equalsIgnoreCase("Saída") && quantidade > estoqueAtual) {
                JOptionPane.showMessageDialog(this, "Quantidade maior que estoque disponível!");
                return;
            }

            int novoEstoque = tipo.equalsIgnoreCase("Entrada") ? estoqueAtual + quantidade :
                             tipo.equalsIgnoreCase("Saída") ? estoqueAtual - quantidade : estoqueAtual;

            // 3️⃣ Inserir movimentação na tabela movimentacoes
            String sqlMov = "INSERT INTO movimentacoes (id_usuario, tipo_movimentacao, quantidade_movimentacao) VALUES (?, ?, ?)";
            PreparedStatement pstMov = conn.prepareStatement(sqlMov);
            pstMov.setInt(1, idUsuario);
            pstMov.setString(2, tipo);
            pstMov.setInt(3, quantidade); // quantidade agora é inserida
            pstMov.executeUpdate();

            // 4️⃣ Atualizar estoque do produto
            String sqlAtualizaEstoque = "UPDATE produtos SET quantidade_estoque = ? WHERE id_produto = ?";
            PreparedStatement pstAtualiza = conn.prepareStatement(sqlAtualizaEstoque);
            pstAtualiza.setInt(1, novoEstoque);
            pstAtualiza.setInt(2, idProduto);
            pstAtualiza.executeUpdate();

            JOptionPane.showMessageDialog(this, "Movimentação registrada para o produto: " + nomeProduto);

            // Limpar campos
            txt_movimentacoesTipo.setText("");
            txt_movimentacoesQuantidade.setText("");
            txt_movimentacoesProduto.setText("");

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao registrar movimentação: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_movimentacoesRegistrarActionPerformed

    private void btn_movimentacoesVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_movimentacoesVoltarActionPerformed
        menuView menu = new menuView(this.perfil, this.idUsuario);
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_movimentacoesVoltarActionPerformed

    private void txt_movimentacoesTipoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_movimentacoesTipoFocusLost
        if (txt_movimentacoesTipo.getText().isEmpty()) {
            txt_movimentacoesTipo.setText("Entrada / Saida / Ajuste");
            txt_movimentacoesTipo.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_txt_movimentacoesTipoFocusLost

    private void txt_movimentacoesTipoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_movimentacoesTipoMousePressed
        if (txt_movimentacoesTipo.getText().equals("Entrada / Saida / Ajuste")) {
            txt_movimentacoesTipo.setText("");
            txt_movimentacoesTipo.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_txt_movimentacoesTipoMousePressed

    private void txt_movimentacoesProdutoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_movimentacoesProdutoFocusLost
        if (txt_movimentacoesProduto.getText().isEmpty()) {
            txt_movimentacoesProduto.setText("Insira o nome do produto movimentado");
            txt_movimentacoesProduto.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_txt_movimentacoesProdutoFocusLost

    private void txt_movimentacoesProdutoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_movimentacoesProdutoMousePressed
        if (txt_movimentacoesProduto.getText().equals("Insira o nome do produto movimentado")) {
            txt_movimentacoesProduto.setText("");
            txt_movimentacoesProduto.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_txt_movimentacoesProdutoMousePressed

    private void txt_movimentacoesQuantidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_movimentacoesQuantidadeFocusLost
        if (txt_movimentacoesQuantidade.getText().isEmpty()) {
            txt_movimentacoesQuantidade.setText("Insira a quantidade movimentada");
            txt_movimentacoesQuantidade.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_txt_movimentacoesQuantidadeFocusLost

    private void txt_movimentacoesQuantidadeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_movimentacoesQuantidadeMousePressed
        if (txt_movimentacoesQuantidade.getText().equals("Insira a quantidade movimentada")) {
            txt_movimentacoesQuantidade.setText("");
            txt_movimentacoesQuantidade.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_txt_movimentacoesQuantidadeMousePressed

    private void btn_movimentacoesCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_movimentacoesCancelActionPerformed
        String url = "jdbc:mysql://localhost:3306/gestor_estoque";
        String usuarioDB = "root";
        String senhaDB = "1234";

        try (Connection conn = DriverManager.getConnection(url, usuarioDB, senhaDB)) {

            // 1️⃣ Buscar todas as movimentações
            String sql = "SELECT m.id_movimentacao, m.tipo_movimentacao, m.quantidade_movimentacao, p.nome_produto " +
                         "FROM movimentacoes m " +
                         "JOIN produtos p ON p.id_produto = m.id_usuario " + // ajuste se houver relação
                         "ORDER BY m.data_movimentacao DESC";
            PreparedStatement pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();

            StringBuilder listaMov = new StringBuilder("Movimentações cadastradas:\n\n");
            while (rs.next()) {
                int id = rs.getInt("id_movimentacao");
                String produto = rs.getString("nome_produto");
                String tipo = rs.getString("tipo_movimentacao");
                int qtd = rs.getInt("quantidade_movimentacao");

                listaMov.append("ID: ").append(id)
                        .append(" | Produto: ").append(produto)
                        .append(" | Tipo: ").append(tipo)
                        .append(" | Quantidade: ").append(qtd)
                        .append("\n");
            }

            rs.close();
            pst.close();

            // Mostrar lista para o usuário
            JOptionPane.showMessageDialog(this, listaMov.toString());

            // 2️⃣ Perguntar qual movimentação deseja cancelar
            String inputId = JOptionPane.showInputDialog(this, "Informe o ID da movimentação que deseja cancelar:");
            if (inputId == null || inputId.trim().isEmpty()) return;

            int idMovimentacao;
            try {
                idMovimentacao = Integer.parseInt(inputId.trim());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "ID inválido!");
                return;
            }

            // 3️⃣ Confirmar se o usuário realmente deseja excluir
            String sqlVerifica = "SELECT m.id_movimentacao, m.tipo_movimentacao, m.quantidade_movimentacao, p.nome_produto " +
                                 "FROM movimentacoes m " +
                                 "JOIN produtos p ON p.id_produto = m.id_usuario " + // ajuste se houver relação
                                 "WHERE m.id_movimentacao = ?";
            PreparedStatement pstVerifica = conn.prepareStatement(sqlVerifica);
            pstVerifica.setInt(1, idMovimentacao);
            ResultSet rsVerifica = pstVerifica.executeQuery();

            if (!rsVerifica.next()) {
                JOptionPane.showMessageDialog(this, "Movimentação não encontrada!");
                return;
            }

            String produto = rsVerifica.getString("nome_produto");
            String tipo = rsVerifica.getString("tipo_movimentacao");
            int quantidade = rsVerifica.getInt("quantidade_movimentacao");

            int confirm = JOptionPane.showConfirmDialog(this,
                    "Deseja realmente cancelar a movimentação do produto: " + produto +
                    "\nTipo: " + tipo + "\nQuantidade: " + quantidade + "?",
                    "Confirmar cancelamento",
                    JOptionPane.YES_NO_OPTION);

            if (confirm != JOptionPane.YES_OPTION) return;

            // 4️⃣ Excluir movimentação
            String sqlDelete = "DELETE FROM movimentacoes WHERE id_movimentacao = ?";
            PreparedStatement pstDelete = conn.prepareStatement(sqlDelete);
            pstDelete.setInt(1, idMovimentacao);
            pstDelete.executeUpdate();

            JOptionPane.showMessageDialog(this, "Movimentação cancelada com sucesso!");

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao acessar o banco de dados: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_movimentacoesCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(movimentacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(movimentacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(movimentacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(movimentacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_movimentacoesCancel;
    private javax.swing.JButton btn_movimentacoesRegistrar;
    private javax.swing.JButton btn_movimentacoesVoltar;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txt_movimentacoesProduto;
    private javax.swing.JTextField txt_movimentacoesQuantidade;
    private javax.swing.JTextField txt_movimentacoesTipo;
    // End of variables declaration//GEN-END:variables
}
